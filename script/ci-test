#!/bin/bash

# CI Test Script
# This script runs all tests for both backend and frontend

set -e  # Exit on any error

echo "🚀 Starting CI Test Pipeline"
echo "=============================="

# Get the project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

echo "📍 Project root: $PROJECT_ROOT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Function to run backend tests
run_backend_tests() {
    print_status "Running backend tests..."
    cd "$PROJECT_ROOT/backend"
    
    if [ ! -f "pyproject.toml" ]; then
        print_error "pyproject.toml not found in backend directory"
        exit 1
    fi
    
    print_status "Installing backend dependencies with uv..."
    if command -v uv >/dev/null 2>&1; then
        uv sync --dev
    else
        print_error "uv is not installed. Please install uv first."
        exit 1
    fi
    
    print_status "Running pytest..."
    uv run python -m pytest --verbose --tb=short
    
    print_success "Backend tests completed successfully!"
}

# Function to run frontend tests
run_frontend_tests() {
    print_status "Running frontend tests..."
    cd "$PROJECT_ROOT/frontend"
    
    if [ ! -f "package.json" ]; then
        print_error "package.json not found in frontend directory"
        exit 1
    fi
    
    print_status "Installing frontend dependencies..."
    if command -v npm >/dev/null 2>&1; then
        npm install --legacy-peer-deps --silent
    else
        print_error "npm is not installed. Please install Node.js and npm first."
        exit 1
    fi
    
    print_status "Running frontend tests..."
    npm run test:run
    
    print_success "Frontend tests completed successfully!"
}

# Function to run linting (optional)
run_linting() {
    print_status "Running linting..."
    cd "$PROJECT_ROOT/frontend"
    
    if npm list eslint >/dev/null 2>&1; then
        print_status "Running ESLint..."
        npm run lint
        print_success "Linting completed successfully!"
    else
        print_warning "ESLint not found, skipping linting step"
    fi
}

# Main execution
main() {
    echo
    print_status "Starting test execution..."
    echo
    
    # Run backend tests
    echo "🔧 BACKEND TESTS"
    echo "================"
    run_backend_tests
    echo
    
    # Run frontend tests
    echo "🎨 FRONTEND TESTS"
    echo "================="
    run_frontend_tests
    echo
    
    # Run linting (optional)
    echo "📝 CODE LINTING"
    echo "==============="
    run_linting
    echo
    
    print_success "🎉 All tests passed! CI pipeline completed successfully."
    echo
    echo "Summary:"
    echo "✅ Backend tests: PASSED"
    echo "✅ Frontend tests: PASSED" 
    echo "✅ Code linting: PASSED"
}

# Handle script interruption
trap 'print_error "CI pipeline interrupted"; exit 1' INT TERM

# Run main function
main "$@"